#!/usr/bin/env python
# -*- coding: utf-8 -*-
# START LICENCE ##############################################################
#
# <one line to give the program's name and a brief idea of what it does.>
# Copyright (C) <year>  <name of author>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# END LICENCE ##############################################################
"""
Galohi-HCA is a tool to retrieve the trace of a specific domain inside a list
of proteomes or genomes.
The domain can be invisible for several reasons:
- the annotation process went wrong (lost of start or stop signal)
- the domain has been biologicaly lost
- the domain has been biologicaly gain
Different modes are avaliable according to these hypothesis.

From a fasta file, the nucleotide sequences are aligned using the MCASE program.
Amino acids corresponding to this alignments are annotated using Pfam.
A Seg-HCA profile is also computed for each sequences.
According to the alignment, the domain annotation and the HCA profile, domains
annotations are transfered between proteins.
Selection pressure are computed using EvolTree from the ETE package (paml) and
a computed tree using RAxML (or provided by the user).
"""

__author__  = "Tristan Bitard-Feildel"
__email__   = "tristan.bitard.feildel@uni-muenster.de"
__year__    = 2014
__licence__ = "GPLv3"
__version__ = 0.1

import pyHCA,  sys

if __name__ == '__main__':
    """ Executable script for hca annotation
    """
    
    ext = pyHCA.annotateHCA_main()
    #ext = 0
    #try:
    #    ext = apps.galohiHCA_main()
    #except SystemExit as e:
    #    ext = e.code
    #except:
    #    print "Unexpected error:", sys.exc_info()[0]
    #    traceback.print_exc()
    #    ext = 1
    #finally:
    #    sys.exit(ext)
    sys.exit(ext)

